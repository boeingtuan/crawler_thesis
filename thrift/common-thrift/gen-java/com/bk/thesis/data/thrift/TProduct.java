/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bk.thesis.data.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-07-20")
public class TProduct implements org.apache.thrift.TBase<TProduct, TProduct._Fields>, java.io.Serializable, Cloneable, Comparable<TProduct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TProduct");

  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CER_REVIEWS_FIELD_DESC = new org.apache.thrift.protocol.TField("cerReviews", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField NOTCER_REVIEWS_FIELD_DESC = new org.apache.thrift.protocol.TField("notcerReviews", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField CURRENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("currentTime", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TProductStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TProductTupleSchemeFactory();

  public java.lang.String productId; // required
  public java.lang.String url; // required
  public java.lang.String title; // required
  public TReviewMeta cerReviews; // required
  public TReviewMeta notcerReviews; // required
  public long currentTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRODUCT_ID((short)1, "productId"),
    URL((short)2, "url"),
    TITLE((short)3, "title"),
    CER_REVIEWS((short)4, "cerReviews"),
    NOTCER_REVIEWS((short)5, "notcerReviews"),
    CURRENT_TIME((short)6, "currentTime");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_ID
          return PRODUCT_ID;
        case 2: // URL
          return URL;
        case 3: // TITLE
          return TITLE;
        case 4: // CER_REVIEWS
          return CER_REVIEWS;
        case 5: // NOTCER_REVIEWS
          return NOTCER_REVIEWS;
        case 6: // CURRENT_TIME
          return CURRENT_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CURRENTTIME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CER_REVIEWS, new org.apache.thrift.meta_data.FieldMetaData("cerReviews", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TReviewMeta.class)));
    tmpMap.put(_Fields.NOTCER_REVIEWS, new org.apache.thrift.meta_data.FieldMetaData("notcerReviews", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TReviewMeta.class)));
    tmpMap.put(_Fields.CURRENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("currentTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TProduct.class, metaDataMap);
  }

  public TProduct() {
  }

  public TProduct(
    java.lang.String productId,
    java.lang.String url,
    java.lang.String title,
    TReviewMeta cerReviews,
    TReviewMeta notcerReviews,
    long currentTime)
  {
    this();
    this.productId = productId;
    this.url = url;
    this.title = title;
    this.cerReviews = cerReviews;
    this.notcerReviews = notcerReviews;
    this.currentTime = currentTime;
    setCurrentTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TProduct(TProduct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetCerReviews()) {
      this.cerReviews = new TReviewMeta(other.cerReviews);
    }
    if (other.isSetNotcerReviews()) {
      this.notcerReviews = new TReviewMeta(other.notcerReviews);
    }
    this.currentTime = other.currentTime;
  }

  public TProduct deepCopy() {
    return new TProduct(this);
  }

  @Override
  public void clear() {
    this.productId = null;
    this.url = null;
    this.title = null;
    this.cerReviews = null;
    this.notcerReviews = null;
    setCurrentTimeIsSet(false);
    this.currentTime = 0;
  }

  public java.lang.String getProductId() {
    return this.productId;
  }

  public TProduct setProductId(java.lang.String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  public java.lang.String getUrl() {
    return this.url;
  }

  public TProduct setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public java.lang.String getTitle() {
    return this.title;
  }

  public TProduct setTitle(java.lang.String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public TReviewMeta getCerReviews() {
    return this.cerReviews;
  }

  public TProduct setCerReviews(TReviewMeta cerReviews) {
    this.cerReviews = cerReviews;
    return this;
  }

  public void unsetCerReviews() {
    this.cerReviews = null;
  }

  /** Returns true if field cerReviews is set (has been assigned a value) and false otherwise */
  public boolean isSetCerReviews() {
    return this.cerReviews != null;
  }

  public void setCerReviewsIsSet(boolean value) {
    if (!value) {
      this.cerReviews = null;
    }
  }

  public TReviewMeta getNotcerReviews() {
    return this.notcerReviews;
  }

  public TProduct setNotcerReviews(TReviewMeta notcerReviews) {
    this.notcerReviews = notcerReviews;
    return this;
  }

  public void unsetNotcerReviews() {
    this.notcerReviews = null;
  }

  /** Returns true if field notcerReviews is set (has been assigned a value) and false otherwise */
  public boolean isSetNotcerReviews() {
    return this.notcerReviews != null;
  }

  public void setNotcerReviewsIsSet(boolean value) {
    if (!value) {
      this.notcerReviews = null;
    }
  }

  public long getCurrentTime() {
    return this.currentTime;
  }

  public TProduct setCurrentTime(long currentTime) {
    this.currentTime = currentTime;
    setCurrentTimeIsSet(true);
    return this;
  }

  public void unsetCurrentTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURRENTTIME_ISSET_ID);
  }

  /** Returns true if field currentTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURRENTTIME_ISSET_ID);
  }

  public void setCurrentTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CURRENTTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((java.lang.String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((java.lang.String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((java.lang.String)value);
      }
      break;

    case CER_REVIEWS:
      if (value == null) {
        unsetCerReviews();
      } else {
        setCerReviews((TReviewMeta)value);
      }
      break;

    case NOTCER_REVIEWS:
      if (value == null) {
        unsetNotcerReviews();
      } else {
        setNotcerReviews((TReviewMeta)value);
      }
      break;

    case CURRENT_TIME:
      if (value == null) {
        unsetCurrentTime();
      } else {
        setCurrentTime((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_ID:
      return getProductId();

    case URL:
      return getUrl();

    case TITLE:
      return getTitle();

    case CER_REVIEWS:
      return getCerReviews();

    case NOTCER_REVIEWS:
      return getNotcerReviews();

    case CURRENT_TIME:
      return getCurrentTime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_ID:
      return isSetProductId();
    case URL:
      return isSetUrl();
    case TITLE:
      return isSetTitle();
    case CER_REVIEWS:
      return isSetCerReviews();
    case NOTCER_REVIEWS:
      return isSetNotcerReviews();
    case CURRENT_TIME:
      return isSetCurrentTime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TProduct)
      return this.equals((TProduct)that);
    return false;
  }

  public boolean equals(TProduct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_cerReviews = true && this.isSetCerReviews();
    boolean that_present_cerReviews = true && that.isSetCerReviews();
    if (this_present_cerReviews || that_present_cerReviews) {
      if (!(this_present_cerReviews && that_present_cerReviews))
        return false;
      if (!this.cerReviews.equals(that.cerReviews))
        return false;
    }

    boolean this_present_notcerReviews = true && this.isSetNotcerReviews();
    boolean that_present_notcerReviews = true && that.isSetNotcerReviews();
    if (this_present_notcerReviews || that_present_notcerReviews) {
      if (!(this_present_notcerReviews && that_present_notcerReviews))
        return false;
      if (!this.notcerReviews.equals(that.notcerReviews))
        return false;
    }

    boolean this_present_currentTime = true;
    boolean that_present_currentTime = true;
    if (this_present_currentTime || that_present_currentTime) {
      if (!(this_present_currentTime && that_present_currentTime))
        return false;
      if (this.currentTime != that.currentTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetProductId()) ? 131071 : 524287);
    if (isSetProductId())
      hashCode = hashCode * 8191 + productId.hashCode();

    hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
    if (isSetUrl())
      hashCode = hashCode * 8191 + url.hashCode();

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetCerReviews()) ? 131071 : 524287);
    if (isSetCerReviews())
      hashCode = hashCode * 8191 + cerReviews.hashCode();

    hashCode = hashCode * 8191 + ((isSetNotcerReviews()) ? 131071 : 524287);
    if (isSetNotcerReviews())
      hashCode = hashCode * 8191 + notcerReviews.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(currentTime);

    return hashCode;
  }

  @Override
  public int compareTo(TProduct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCerReviews()).compareTo(other.isSetCerReviews());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCerReviews()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cerReviews, other.cerReviews);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNotcerReviews()).compareTo(other.isSetNotcerReviews());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotcerReviews()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notcerReviews, other.notcerReviews);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCurrentTime()).compareTo(other.isSetCurrentTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentTime, other.currentTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TProduct(");
    boolean first = true;

    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cerReviews:");
    if (this.cerReviews == null) {
      sb.append("null");
    } else {
      sb.append(this.cerReviews);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notcerReviews:");
    if (this.notcerReviews == null) {
      sb.append("null");
    } else {
      sb.append(this.notcerReviews);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentTime:");
    sb.append(this.currentTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cerReviews != null) {
      cerReviews.validate();
    }
    if (notcerReviews != null) {
      notcerReviews.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TProductStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TProductStandardScheme getScheme() {
      return new TProductStandardScheme();
    }
  }

  private static class TProductStandardScheme extends org.apache.thrift.scheme.StandardScheme<TProduct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TProduct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CER_REVIEWS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cerReviews = new TReviewMeta();
              struct.cerReviews.read(iprot);
              struct.setCerReviewsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NOTCER_REVIEWS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.notcerReviews = new TReviewMeta();
              struct.notcerReviews.read(iprot);
              struct.setNotcerReviewsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CURRENT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.currentTime = iprot.readI64();
              struct.setCurrentTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TProduct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(struct.productId);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.cerReviews != null) {
        oprot.writeFieldBegin(CER_REVIEWS_FIELD_DESC);
        struct.cerReviews.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.notcerReviews != null) {
        oprot.writeFieldBegin(NOTCER_REVIEWS_FIELD_DESC);
        struct.notcerReviews.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CURRENT_TIME_FIELD_DESC);
      oprot.writeI64(struct.currentTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TProductTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TProductTupleScheme getScheme() {
      return new TProductTupleScheme();
    }
  }

  private static class TProductTupleScheme extends org.apache.thrift.scheme.TupleScheme<TProduct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TProduct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetProductId()) {
        optionals.set(0);
      }
      if (struct.isSetUrl()) {
        optionals.set(1);
      }
      if (struct.isSetTitle()) {
        optionals.set(2);
      }
      if (struct.isSetCerReviews()) {
        optionals.set(3);
      }
      if (struct.isSetNotcerReviews()) {
        optionals.set(4);
      }
      if (struct.isSetCurrentTime()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetProductId()) {
        oprot.writeString(struct.productId);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetCerReviews()) {
        struct.cerReviews.write(oprot);
      }
      if (struct.isSetNotcerReviews()) {
        struct.notcerReviews.write(oprot);
      }
      if (struct.isSetCurrentTime()) {
        oprot.writeI64(struct.currentTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TProduct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.productId = iprot.readString();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(2)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cerReviews = new TReviewMeta();
        struct.cerReviews.read(iprot);
        struct.setCerReviewsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.notcerReviews = new TReviewMeta();
        struct.notcerReviews.read(iprot);
        struct.setNotcerReviewsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.currentTime = iprot.readI64();
        struct.setCurrentTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

